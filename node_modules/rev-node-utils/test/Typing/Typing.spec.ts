/**
 * This file is a part of RevNodeUtils
 * @Author Reverze <hawkmedia24@gmail.com>
 */
"use strict";
import {Typing} from '../../src/index';
import { expect } from 'chai';

describe('Typing:Test', () => {
    /**
     * Test for valid string objects
     */
    it("should indicate as string", function(){
        expect(Typing.isString("a some text")).to.be.true;
        expect(Typing.isString("")).to.be.true;
    });

    /**
     * Test for invalid objects
     */
    it("should not indicate as string", function(){
        expect(Typing.isString(42)).to.be.false;
        expect(Typing.isString([])).to.be.false;
        expect(Typing.isString({})).to.be.false;
        expect(Typing.isString(undefined)).to.be.false;
        expect(Typing.isString(null)).to.be.false;
    });

    /**
     * Test for valid numbers
     */
    it("should indicate as valid number", function(){
        expect(Typing.isNumber(42)).to.be.true;
        expect(Typing.isNumber(42.4)).to.be.true;
        expect(Typing.isNumber("42.4")).to.be.true;
        expect(Typing.isNumber("42")).to.be.true;
    });

    /**
     * Test for invalid values
     */
    it("should not indicate as valid number", function(){
        expect(Typing.isNumber(null)).to.be.false;
        expect(Typing.isNumber(undefined)).to.be.false;
        expect(Typing.isNumber([])).to.be.false;
        expect(Typing.isNumber({})).to.be.false;
        expect(Typing.isNumber("das")).to.be.false;
    });

    /**
     * Test for array objects
     */
    it("should indicate as array", function(){
        expect(Typing.isArray([])).to.be.true;
        expect(Typing.isArray([ "d" ])).to.be.true;
    });

    /**
     * Test for invalid values
     */
    it("should not indicate as array", function(){
        expect(Typing.isArray({})).to.be.false;
        expect(Typing.isArray(null)).to.be.false;
        expect(Typing.isArray(undefined)).to.be.false;
        expect(Typing.isArray(42)).to.be.false;
    });

    /**
     * Test for valid values
     */
    it("should indicate as object", function(){
        expect(Typing.isObject({})).to.be.true;
        expect(Typing.isObject(new String())).to.be.true;
    });

    it("should not indicate as object", function(){
        expect(Typing.isObject(null)).to.be.false;
        expect(Typing.isObject(undefined)).to.be.false;
    });

    it("should indicate as empty values/objects", function(){
        expect(Typing.isEmpty([])).to.be.true;
        expect(Typing.isEmpty({})).to.be.true;
        expect(Typing.isEmpty("")).to.be.true;
        expect(Typing.isEmpty(null)).to.be.true;
        expect(Typing.isEmpty(undefined)).to.be.true;
    });

    it("should not indicate as empty values/objects", function(){
        expect(Typing.isEmpty([ "ddas" ])).to.be.false;
        expect(Typing.isEmpty({ "dads": [ "ds" ] })).to.be.false;
        expect(Typing.isEmpty("dasd")).to.be.false;
        expect(Typing.isEmpty(42)).to.be.false;
    });
});