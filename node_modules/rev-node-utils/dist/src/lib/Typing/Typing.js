/**
 * This file is a part of RevNodeUtils
 * @Author Reverze <hawkmedia24@gmail.com>
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Typing {
    /**
     * Checks if object is an array
     * @param object
     * @returns {boolean}
     */
    static isArray(object) {
        return Object.prototype.toString.call(object) === '[object Array]';
    }
    /**
     * Checks if value is an object
     * @param object
     * @returns {boolean}
     */
    static isObject(object) {
        if (object === null || object === undefined) {
            return false;
        }
        else if (Object.prototype.toString.call(object) === '[object Object]') {
            return true;
        }
        else {
            return typeof (object) === 'object';
        }
    }
    /**
     * Checks if given value is a string
     * @param value
     * @returns {boolean}
     */
    static isString(value) {
        return typeof (value) === 'string';
    }
    /**
     * If value is string, checks if is not empty.
     * If value is null return true
     * @param value
     * @returns {boolean}
     */
    static isNotEmptyStringNullable(value) {
        if (typeof (value) === 'string') {
            if (value.length <= 0) {
                return false;
            }
            else {
                return true;
            }
        }
        else if (value === null) {
            return true;
        }
        return false;
    }
    /**
     * Checks if given value is a number
     * @param value
     * @returns {boolean}
     */
    static isNumber(value) {
        if (typeof (value) === 'number') {
            return true;
        }
        if (typeof (value) === 'string') {
            try {
                let val = parseFloat(value);
                if (!isNaN(val) && isFinite(val)) {
                    return true;
                }
                return false;
            }
            catch (err) {
                return false;
            }
        }
        return false;
    }
    /**
     * Checks if given value is a boolean
     * @param value
     * @returns {boolean}
     */
    static isBoolean(value) {
        return typeof (value) === 'boolean';
    }
    /**
     * Checks if given value is empty
     * @param value
     * @returns {boolean}
     */
    static isEmpty(value) {
        if (value === undefined) {
            return true;
        }
        else if (value === null) {
            return true;
        }
        else if (this.isArray(value)) {
            if (value.length === 0) {
                return true;
            }
        }
        else if (this.isObject(value)) {
            if (Object.keys(value).length === 0) {
                return true;
            }
        }
        else if (this.isString(value)) {
            if (value.length === 0) {
                return true;
            }
        }
        return false;
    }
    /**
     * Checks if given value is function
     * @param value
     * @returns {boolean}
     */
    static isFunction(value) {
        return typeof (value) === 'function';
    }
}
exports.Typing = Typing;
