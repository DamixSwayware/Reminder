/**
 * This file is a part of RevNodeUtils
 * @Author Reverze <hawkmedia24@gmail.com>
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../../index");
const chai_1 = require("chai");
describe('Typing:Test', () => {
    /**
     * Test for valid string objects
     */
    it("should indicate as string", function () {
        chai_1.expect(index_1.Typing.isString("a some text")).to.be.true;
        chai_1.expect(index_1.Typing.isString("")).to.be.true;
    });
    /**
     * Test for invalid objects
     */
    it("should not indicate as string", function () {
        chai_1.expect(index_1.Typing.isString(42)).to.be.false;
        chai_1.expect(index_1.Typing.isString([])).to.be.false;
        chai_1.expect(index_1.Typing.isString({})).to.be.false;
        chai_1.expect(index_1.Typing.isString(undefined)).to.be.false;
        chai_1.expect(index_1.Typing.isString(null)).to.be.false;
    });
    /**
     * Test for valid numbers
     */
    it("should indicate as valid number", function () {
        chai_1.expect(index_1.Typing.isNumber(42)).to.be.true;
        chai_1.expect(index_1.Typing.isNumber(42.4)).to.be.true;
        chai_1.expect(index_1.Typing.isNumber("42.4")).to.be.true;
        chai_1.expect(index_1.Typing.isNumber("42")).to.be.true;
    });
    /**
     * Test for invalid values
     */
    it("should not indicate as valid number", function () {
        chai_1.expect(index_1.Typing.isNumber(null)).to.be.false;
        chai_1.expect(index_1.Typing.isNumber(undefined)).to.be.false;
        chai_1.expect(index_1.Typing.isNumber([])).to.be.false;
        chai_1.expect(index_1.Typing.isNumber({})).to.be.false;
        chai_1.expect(index_1.Typing.isNumber("das")).to.be.false;
    });
    /**
     * Test for array objects
     */
    it("should indicate as array", function () {
        chai_1.expect(index_1.Typing.isArray([])).to.be.true;
        chai_1.expect(index_1.Typing.isArray(["d"])).to.be.true;
    });
    /**
     * Test for invalid values
     */
    it("should not indicate as array", function () {
        chai_1.expect(index_1.Typing.isArray({})).to.be.false;
        chai_1.expect(index_1.Typing.isArray(null)).to.be.false;
        chai_1.expect(index_1.Typing.isArray(undefined)).to.be.false;
        chai_1.expect(index_1.Typing.isArray(42)).to.be.false;
    });
    /**
     * Test for valid values
     */
    it("should indicate as object", function () {
        chai_1.expect(index_1.Typing.isObject({})).to.be.true;
        chai_1.expect(index_1.Typing.isObject(new String())).to.be.true;
    });
    it("should not indicate as object", function () {
        chai_1.expect(index_1.Typing.isObject(null)).to.be.false;
        chai_1.expect(index_1.Typing.isObject(undefined)).to.be.false;
    });
    it("should indicate as empty values/objects", function () {
        chai_1.expect(index_1.Typing.isEmpty([])).to.be.true;
        chai_1.expect(index_1.Typing.isEmpty({})).to.be.true;
        chai_1.expect(index_1.Typing.isEmpty("")).to.be.true;
        chai_1.expect(index_1.Typing.isEmpty(null)).to.be.true;
        chai_1.expect(index_1.Typing.isEmpty(undefined)).to.be.true;
    });
    it("should not indicate as empty values/objects", function () {
        chai_1.expect(index_1.Typing.isEmpty(["ddas"])).to.be.false;
        chai_1.expect(index_1.Typing.isEmpty({ "dads": ["ds"] })).to.be.false;
        chai_1.expect(index_1.Typing.isEmpty("dasd")).to.be.false;
        chai_1.expect(index_1.Typing.isEmpty(42)).to.be.false;
    });
});
